<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>uni</title>
      <link href="/2024/03/17/uni/"/>
      <url>/2024/03/17/uni/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2024/03/17/suanfa/"/>
      <url>/2024/03/17/suanfa/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/03/17/suanfa/background.jpg" alt="background"></p><h1 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h1><p>debug</p><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void mergesort(int q[],int l, int r)&#123;</span><br><span class="line">    if(l&gt;=r)return;</span><br><span class="line">    int mid=(l+r)/2;</span><br><span class="line">    mergesort(q,l,mid);</span><br><span class="line">    mergesort(q,mid+1,r);</span><br><span class="line">    int k=0,i=l,j=mid+1;</span><br><span class="line">    while(i&lt;=mid&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">        if(q[i]&lt;=q[j])temp[k++]=q[i++];</span><br><span class="line">        else temp[k++]=q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    while(i&lt;=mid)temp=[k++]=q[i++];</span><br><span class="line">    while(j&lt;=r)temp[k++]=q[j++];</span><br><span class="line">    for(int i=l,j=0;i&lt;=r;i++,j++)q[i++]=temp[j++];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//注意如果 取的是q[l]那么就不能用i-1,i,</span><br><span class="line"></span><br><span class="line">void quicksort(int q[],int l,int r)&#123;</span><br><span class="line">    if(l&gt;=r)return;</span><br><span class="line">    int x=q[(l+r)/2];</span><br><span class="line">    int i=l-1,j=r+1;</span><br><span class="line">    while(i&lt;j)&#123;</span><br><span class="line">        do i++;while(q[i]&lt;x);</span><br><span class="line">        do j--;while(q[j]&gt;x);</span><br><span class="line">        if(i&lt;j)swap(q[i],q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    quicksort(q,l,j);</span><br><span class="line">    quicksort(q,j+1;r);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//找左边</span><br><span class="line">int bsearch_1(int l,int r)&#123;</span><br><span class="line">    while(l&lt;r)&#123;</span><br><span class="line">        int mid=(l+r+1)/2;</span><br><span class="line">        if(check(mid))&#123;</span><br><span class="line">            l=mid;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            r=mid-1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125; </span><br><span class="line">//找右边                                                                               int bsearch_2(int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    while (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        int mid = l + r &gt;&gt; 1;</span><br><span class="line">        if (check(mid)) r = mid;</span><br><span class="line">        else l = mid + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h4 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h4><h4 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h4><h4 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h4><h4 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define MAXLEN 200</span><br><span class="line"> vector&lt;int&gt; arr;</span><br><span class="line">int find(int x,int l,int r)&#123;</span><br><span class="line">    int l=0;</span><br><span class="line">    int r=arr.size()-1;</span><br><span class="line">    while(l&lt;r)&#123;</span><br><span class="line">        int mid=l+r&gt;&gt;2;</span><br><span class="line">        if(arr[mid]&gt;=x)r=mid;</span><br><span class="line">        else l=mid+1;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return l+1; </span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">   //离散化的代码</span><br><span class="line">    int n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">  for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">    int temp;</span><br><span class="line">    cin&gt;&gt;temp;</span><br><span class="line"></span><br><span class="line">    arr.push_back(temp);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">   sort(arr.begin(),arr.end());</span><br><span class="line">   arr.erase(unique(arr.begin(),arr.end()),arr.end()); </span><br><span class="line">    for(int i=0;i&lt;arr.size();i++)&#123;</span><br><span class="line">        cout&lt;&lt;arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">int p[500000];</span><br><span class="line">//关键操作</span><br><span class="line">int find(int x)&#123;</span><br><span class="line">    if(p[x]!=x)p[x]=find(p[x]);</span><br><span class="line">    return p[x];</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m;</span><br><span class="line"></span><br><span class="line">   scanf(&quot;%d%d&quot;,&amp;n,&amp;m)</span><br><span class="line">   for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">    p[i]=i;</span><br><span class="line">   &#125;</span><br><span class="line">   while(m--)&#123;</span><br><span class="line">    char op[5];</span><br><span class="line">    int a,b;</span><br><span class="line">    scanf(&quot;%s&quot;,op);</span><br><span class="line">    if(op[0]==&#x27;C&#x27;)&#123;</span><br><span class="line">        scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">        if(find(a)==find(b))continue;</span><br><span class="line">        p[find(a)]=find(b);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="kmp"><a href="#kmp" class="headerlink" title="kmp"></a>kmp</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">char b[20000]</span><br><span class="line">int next[20000];</span><br><span class="line">void getNext(int m)&#123;</span><br><span class="line">    //m是子串长度</span><br><span class="line">    int j=0;</span><br><span class="line">    next[0]=0;</span><br><span class="line">    for(int i=1;i&lt;m;i++)&#123;</span><br><span class="line">        while(j&gt;0&amp;&amp;b[i]!=b[j])&#123;</span><br><span class="line">            j=next[j-1];</span><br><span class="line">        &#125;</span><br><span class="line">        if(b[i]!=b[j])j++;</span><br><span class="line">        next[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//返回首次匹配的位置</span><br><span class="line">int kmp(int n,int m)&#123;</span><br><span class="line">    int i,j=0;</span><br><span class="line">    int p=-1;</span><br><span class="line">    getNext(m);</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        while(j&gt;0&amp;&amp;b[j]!=a[i])j=next[j-1];</span><br><span class="line">        if(b[j]==a[i])j++;</span><br><span class="line">        if(j==m)&#123;</span><br><span class="line">            p=i-m+1;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line">int kmp(int n,int m)&#123;</span><br><span class="line">    // 初始化答案数量res = 0</span><br><span class="line">int i, j = 0, res = 0;</span><br><span class="line">// 初始化next数组</span><br><span class="line">getNext(m);</span><br><span class="line">for(i=0; i&lt;n; ++i)&#123;</span><br><span class="line">// 当这一位不匹配时，将j指向此位之前最大公共前后缀的位置</span><br><span class="line">while(j&gt;0 &amp;&amp; b[j]!=a[i]) j=kmp_next[j-1];</span><br><span class="line">// 如果这一位匹配，那么将j+1，继续判断下一位</span><br><span class="line">if(b[j]==a[i]) ++j;</span><br><span class="line">// 如果是子串(m位完全匹配)，则答案数量增加，res = res + 1</span><br><span class="line">if(j==m) ++res;</span><br><span class="line">&#125;</span><br><span class="line">// 返回答案数量</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h1><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><h4 id="trie树"><a href="#trie树" class="headerlink" title="trie树"></a>trie树</h4><p>高效地存储和查找字符串的数据结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//存储字符串</span><br><span class="line">#define N=200000</span><br><span class="line">int son[N][26],cnt[N],idx;</span><br><span class="line">void insert(char str[])&#123;</span><br><span class="line">int p=0;</span><br><span class="line">for(int i=0;str[i];i++)&#123;</span><br><span class="line">        int u=str[i]=&#x27;a&#x27;;</span><br><span class="line">        if(!son[p][u])son[p][u]=++idx;</span><br><span class="line">        p=son[p][u];</span><br><span class="line">&#125;</span><br><span class="line">cnt[p]++;</span><br><span class="line">&#125;</span><br><span class="line">int query(char str)&#123;</span><br><span class="line">int p=;</span><br><span class="line">for(int i=0;str[i];i++)&#123;</span><br><span class="line">        int u=str[i]=&#x27;a&#x27;;</span><br><span class="line">        if(!son[p][u])return ;</span><br><span class="line">        p=son[p][u];</span><br><span class="line">&#125;</span><br><span class="line">return cnt[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><p>堆用一位数组，下标从1开始好，左儿子是2x,右儿子是2x+1,down操作把大的数字往下移动，up操作把小的数字往上移动</p><p>stl的堆是优先队列</p><p>小顶堆 根节点是最小值</p><p>大顶堆</p><p>堆的五个操作</p><p>1插入一个数  heap[++size]&#x3D;x;up[x]</p><p>2求集合中的最小值  heap[1]</p><p>3删除最小值  heap[1]&#x3D;heap[size]  size–;down(1)</p><p>4删除第k个数字   heap[k]&#x3D;heap[size] size–;up(k); down(k)  </p><p>5修改任意一个数  heap[k]&#x3D;   up(k)  down(k)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define N 200</span><br><span class="line"></span><br><span class="line">int heap[N],size;</span><br><span class="line">void down(int u)&#123;</span><br><span class="line">    //t记录三个点的最小值</span><br><span class="line">    int t=u;</span><br><span class="line">    if(2*u&lt;=size&amp;&amp;heap[t]&gt;heap[2*u])t=2*u;</span><br><span class="line">    if(2*u+1&lt;=size&amp;&amp;heap[t]&gt;heap[2*u+1])t=2*u+1;</span><br><span class="line">    if(t!=u)&#123;</span><br><span class="line">        swap(heap[t],heap[u]);</span><br><span class="line">        down(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void up(int u)&#123;</span><br><span class="line">    while(u/2&amp;&amp;heap[u/2]&gt;heap[u])&#123;</span><br><span class="line">        swap(h[u/2],h[u]);</span><br><span class="line">        u/=2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m;</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);</span><br><span class="line">    for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;)</span><br><span class="line">    &#125;</span><br><span class="line">    //O(n)时间的建堆过程</span><br><span class="line">    for(int i=n/2;i;i--)&#123;</span><br><span class="line">        down(i);</span><br><span class="line">    &#125;</span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>拉链法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//这里每次插入一个值，idx++，e存储真实值，h存储下标号，ne存储拉链法的同一个哈希值的下一个</span><br><span class="line">int h[N],e[N],ne[N],idx;</span><br><span class="line">void insert(int x)&#123;</span><br><span class="line">    int k=(x%num+num)%num;</span><br><span class="line">    e[idx]=x;</span><br><span class="line">    ne[idx]=h[k];</span><br><span class="line">    h[k]=idx++;</span><br><span class="line">&#125;</span><br><span class="line">int find(int x)&#123;</span><br><span class="line">    int k=(x%num+num)%num;</span><br><span class="line">    int u=h[k];</span><br><span class="line">    while(u!=-1)&#123;</span><br><span class="line">        if(e[u]==x)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        u=ne[u];</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开放寻址法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int hh[200003],null=0x3f3f3f3f;</span><br><span class="line">//如果存在返回位置，不存在返回应该在哪个位置</span><br><span class="line">int find(int x)&#123;</span><br><span class="line">    int k=(x%num+num)%num;</span><br><span class="line">    while(hh[k]!=null&amp;&amp;hh[k]!=x)&#123;</span><br><span class="line">        k++;</span><br><span class="line">        if(k==200003)k=0;</span><br><span class="line">    &#125;</span><br><span class="line">    return k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串哈希值</p><p>取p&#x3D;131或13331</p><p>模数为2的64次方</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef unsigned long long ULL;</span><br><span class="line">const int N = 1e5+5,P = 131;//131 13331</span><br><span class="line">ULL h[N],p[N];</span><br><span class="line"></span><br><span class="line">// h[i]前i个字符的hash值</span><br><span class="line">// 字符串变成一个p进制数字，体现了字符+顺序，需要确保不同的字符串对应不同的数字</span><br><span class="line">// P = 131 或  13331 Q=2^64，在99%的情况下不会出现冲突</span><br><span class="line">// 使用场景： 两个字符串的子串是否相同</span><br><span class="line">ULL query(int l,int r)&#123;</span><br><span class="line">    return h[r] - h[l-1]*p[r-l+1];</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    string x;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line"></span><br><span class="line">    //字符串从1开始编号，h[1]为前一个字符的哈希值</span><br><span class="line">    p[0] = 1;</span><br><span class="line">    h[0] = 0;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        p[i+1] = p[i]*P;            </span><br><span class="line">        h[i+1] = h[i]*P +x[i];      //前缀和求整个字符串的哈希值</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while(m--)&#123;</span><br><span class="line">        int l1,r1,l2,r2;</span><br><span class="line">        cin&gt;&gt;l1&gt;&gt;r1&gt;&gt;l2&gt;&gt;r2;</span><br><span class="line">        if(query(l1,r1) == query(l2,r2)) printf(&quot;Yes\n&quot;);</span><br><span class="line">        else printf(&quot;No\n&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h4><p><strong>vector</strong> 变长数组，倍增的思想 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//初始化</span><br><span class="line">vector&lt;int&gt;a[10];10个vector数组</span><br><span class="line">vecotr&lt;int&gt;a(10,3);长度10，初始化为3</span><br><span class="line">//</span><br><span class="line">a.size() 返回元素个数，所有元素都有</span><br><span class="line">a.empty() 返回是否为空，所有元素都有</span><br><span class="line">a.clear() 清空</span><br><span class="line">//</span><br><span class="line">a.front() a.back()</span><br><span class="line">a.push_back() a.pop_back()</span><br><span class="line">//迭代器</span><br><span class="line">a.begin() a.end()最后一个数的后一个数</span><br><span class="line">//比较</span><br><span class="line">a&lt;b 按照字典序列比</span><br></pre></td></tr></table></figure><p><strong>pair</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;int,string&gt;p</span><br><span class="line">p.first p.second</span><br><span class="line">//构造</span><br><span class="line">p=make_pair(10,&quot;lgx&quot;);</span><br><span class="line">p=&#123;20,&quot;abc&quot;&#125;;</span><br></pre></td></tr></table></figure><p><strong>string</strong> 字符串 substr() c_str()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//初始化</span><br><span class="line">a.substr(a,len) kai&#x27;shi&#x27;we</span><br></pre></td></tr></table></figure><p><strong>queue</strong> push() front() pop() back()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//初始化</span><br></pre></td></tr></table></figure><p><strong>priority_queue</strong> 优先队列 push() pop() top()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//初始化</span><br></pre></td></tr></table></figure><p><strong>stack</strong> push() pop() top() </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//初始化</span><br></pre></td></tr></table></figure><p><strong>deque</strong> 双端队列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//初始化</span><br></pre></td></tr></table></figure><p><strong>set,map,mutiset,multimap</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">size()</span><br><span class="line">empty()</span><br><span class="line">clear()</span><br><span class="line">begin()/end()</span><br><span class="line"></span><br><span class="line">//set multiset</span><br><span class="line">insert()</span><br><span class="line">find()</span><br><span class="line">erase()</span><br><span class="line">lower_bound() 大于等于</span><br><span class="line">upper_bound() 大于</span><br><span class="line">//map mutimap</span><br><span class="line">insert()</span><br><span class="line">erase()</span><br><span class="line">find()</span><br><span class="line">[] 特别用法</span><br><span class="line">lower_bound</span><br><span class="line">upper_bound()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>unordered_set,unordered_map,unordered_mutiset,unordered_multimap</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">和上面一样增删改查复杂度O（1）</span><br><span class="line">不支持lower_bound</span><br><span class="line">upper_bound()</span><br></pre></td></tr></table></figure><p><strong>bitset</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//初始化</span><br><span class="line">bitset&lt;1000&gt; a;</span><br><span class="line">count() 有多少个1</span><br><span class="line">any() 至少有一个1</span><br><span class="line">none() 判断是否全为0</span><br><span class="line">set() 全部置为0</span><br><span class="line">set(k,v)第k位置为v</span><br><span class="line">reset()全变为0</span><br><span class="line">flip()等价于~取反</span><br><span class="line">flip(k)某位取反</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
